name: CI/CD Pipeline - Optimized

on:
  push:
    branches: [ main, develop, feat/*, feat/unit-and-functional-tests ]
  pull_request:
    branches: [ main, develop ]

env:
  COVERAGE_MINIMUM: 60
  PYTHONPATH: /usr/lib/python3/dist-packages:/usr/share/qgis/python

jobs:
  # ============================================================================
  # LINT AND CODE QUALITY
  # ============================================================================
  lint:
    runs-on: ubuntu-latest
    name: 🔍 Code Quality & Linting
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4

    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: 📦 Cache Dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-lint-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-lint-

    - name: 🔧 Install Linting Tools
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black isort mypy bandit safety

    - name: 🎨 Check Code Formatting (Black)
      run: |
        black --check --diff . --extend-exclude "/(build|dist|\.git|\.pytest_cache|htmlcov)/"

    - name: 📋 Check Import Sorting (isort)
      run: |
        isort --check-only --diff . --skip-glob="*/build/*" --skip-glob="*/dist/*"

    - name: 🚨 Lint with Flake8
      run: |
        # Critical errors that stop the build
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics --exclude=build,dist
        # All other issues as warnings
        flake8 . --count --exit-zero --max-complexity=12 --max-line-length=120 --statistics --exclude=build,dist

    - name: 🔒 Security Analysis (Bandit)
      run: |
        bandit -r . -f json -o bandit-report.json --exclude ./tests,./build,./dist || true
        bandit -r . --exclude ./tests,./build,./dist

    - name: 🛡️ Dependency Security Check
      run: |
        safety check --json --output safety-report.json || true
        safety check

  # ============================================================================
  # UNIT AND INTEGRATION TESTS
  # ============================================================================
  test:
    runs-on: ubuntu-latest
    name: 🧪 Tests (Python ${{ matrix.python-version }})
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.9", "3.10", "3.11"]
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4

    - name: 🐍 Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: 🖥️ Install System Dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          xvfb \
          libqt5gui5 \
          libqt5core5a \
          libqt5widgets5 \
          qt5-qmake \
          qtbase5-dev \
          libgdal-dev \
          gdal-bin \
          python3-gdal \
          qgis \
          python3-qgis

    - name: 📦 Cache Python Dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-${{ matrix.python-version }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-${{ matrix.python-version }}-pip-

    - name: 🔧 Install Python Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest-xvfb pytest-timeout

    - name: 📋 Verify Test Environment
      run: |
        python --version
        python -c "import pytest; print(f'pytest: {pytest.__version__}')"
        python -c "import coverage; print(f'coverage: {coverage.__version__}')"
        echo "PYTHONPATH: $PYTHONPATH"

    - name: 🧪 Run Unit Tests
      run: |
        xvfb-run -a python -m pytest \
          tests/unit/test_crop_model.py \
          tests/unit/test_crop_controller.py \
          tests/unit/test_plugin.py \
          tests/unit/test_config.py \
          tests/unit/test_crop_view.py::TestCropViewSimple \
          --verbose \
          --cov \
          --cov-branch \
          --cov-report=xml:coverage-unit-${{ matrix.python-version }}.xml \
          --cov-report=html:htmlcov-unit-${{ matrix.python-version }} \
          --cov-report=term-missing \
          --timeout=300 \
          -m unit
      env:
        QT_QPA_PLATFORM: offscreen
        QGIS_PREFIX_PATH: /usr
        ENVIRONMENT: test

    - name: 📊 Verify Coverage Achievement
      run: |
        python -c "
        import xml.etree.ElementTree as ET
        tree = ET.parse('coverage-unit-${{ matrix.python-version }}.xml')
        coverage = float(tree.getroot().attrib['line-rate']) * 100
        print(f'Coverage: {coverage:.2f}%')
        if coverage < ${{ env.COVERAGE_MINIMUM }}:
            print(f'❌ Coverage {coverage:.2f}% is below minimum {env.COVERAGE_MINIMUM}%')
            exit(1)
        else:
            print(f'✅ Coverage {coverage:.2f}% meets minimum {env.COVERAGE_MINIMUM}%')
        "

    - name: 📤 Upload Coverage Reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: coverage-reports-${{ matrix.python-version }}
        path: |
          coverage-unit-${{ matrix.python-version }}.xml
          htmlcov-unit-${{ matrix.python-version }}/
        retention-days: 30

  # ============================================================================
  # COVERAGE ANALYSIS AND REPORTING
  # ============================================================================
  coverage:
    runs-on: ubuntu-latest
    name: 📊 Coverage Analysis
    needs: test
    if: always()
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4

    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: 📦 Download Coverage Reports
      uses: actions/download-artifact@v3
      with:
        path: coverage-reports/

    - name: 🔧 Install Coverage Tools
      run: |
        pip install coverage[toml] coverage-badge

    - name: 📊 Combine Coverage Reports
      run: |
        # Find and combine all coverage files
        find coverage-reports/ -name "*.xml" -exec cp {} . \;
        
        # Generate combined report
        if [ -f "coverage-unit-3.11.xml" ]; then
          cp coverage-unit-3.11.xml coverage-combined.xml
          echo "✅ Using Python 3.11 coverage as primary report"
        elif [ -f "coverage-unit-3.10.xml" ]; then
          cp coverage-unit-3.10.xml coverage-combined.xml
          echo "✅ Using Python 3.10 coverage as fallback"
        else
          echo "❌ No coverage reports found"
          exit 1
        fi

    - name: 🏆 Generate Coverage Badge
      run: |
        coverage-badge -o coverage-badge.svg -f || echo "Badge generation failed, continuing..."

    - name: 📈 Coverage Summary
      run: |
        echo "## 📊 Coverage Report" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ -f "coverage-combined.xml" ]; then
          COVERAGE=$(python -c "
          import xml.etree.ElementTree as ET
          tree = ET.parse('coverage-combined.xml')
          print(f'{float(tree.getroot().attrib[\"line-rate\"]) * 100:.2f}')
          ")
          
          echo "| Metric | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|--------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| Overall Coverage | ${COVERAGE}% |" >> $GITHUB_STEP_SUMMARY
          echo "| Minimum Required | ${{ env.COVERAGE_MINIMUM }}% |" >> $GITHUB_STEP_SUMMARY
          echo "| Status | $([ $(echo "$COVERAGE >= ${{ env.COVERAGE_MINIMUM }}" | bc -l) = 1 ] && echo "✅ PASSED" || echo "❌ FAILED") |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🎯 Coverage achieved: **${COVERAGE}%**" >> $GITHUB_STEP_SUMMARY
        fi

    - name: 📤 Upload Combined Coverage
      uses: actions/upload-artifact@v3
      with:
        name: coverage-combined
        path: |
          coverage-combined.xml
          coverage-badge.svg
        retention-days: 90

  # ============================================================================
  # FUNCTIONAL TESTS (Optional - only on main branches)
  # ============================================================================
  functional-test:
    runs-on: ubuntu-latest
    name: 🔄 Functional Tests
    needs: [lint, test]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4

    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: 🖥️ Install Full QGIS Environment
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          qgis \
          python3-qgis \
          qgis-plugin-grass \
          xvfb \
          libqt5gui5 \
          libqt5core5a \
          libqt5widgets5

    - name: 🔧 Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: 🧪 Run Functional Tests
      run: |
        # Run functional tests if they exist
        if [ -d "tests/functional" ]; then
          xvfb-run -a python -m pytest tests/functional/ \
            --verbose \
            --timeout=600 \
            -m functional || echo "Functional tests not fully implemented yet"
        else
          echo "ℹ️ Functional tests directory not found - skipping"
        fi
      env:
        QT_QPA_PLATFORM: offscreen
        QGIS_PREFIX_PATH: /usr

  # ============================================================================
  # DEPLOYMENT STATUS
  # ============================================================================
  status:
    runs-on: ubuntu-latest
    name: 📋 Build Status
    needs: [lint, test, coverage]
    if: always()
    
    steps:
    - name: 📊 Determine Status
      run: |
        echo "## 🚀 CI/CD Pipeline Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|-----|--------|" >> $GITHUB_STEP_SUMMARY
        echo "| Lint & Quality | ${{ needs.lint.result == 'success' && '✅ PASSED' || '❌ FAILED' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Unit Tests | ${{ needs.test.result == 'success' && '✅ PASSED' || '❌ FAILED' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Coverage Analysis | ${{ needs.coverage.result == 'success' && '✅ PASSED' || '❌ FAILED' }} |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [[ "${{ needs.lint.result }}" == "success" && "${{ needs.test.result }}" == "success" && "${{ needs.coverage.result }}" == "success" ]]; then
          echo "### 🎉 All checks passed! Ready for deployment." >> $GITHUB_STEP_SUMMARY
          exit 0
        else
          echo "### ❌ Some checks failed. Please review the results." >> $GITHUB_STEP_SUMMARY
          exit 1
        fi 